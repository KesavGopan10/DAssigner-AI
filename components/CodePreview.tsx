import React, { useState, useEffect } from 'react';
import { CopyIcon, CheckIcon, ArrowTopRightOnSquareIcon, SparklesIcon } from './icons/Icons';

type Framework = 'HTML' | 'React' | 'Vue';

interface CodePreviewProps {
  htmlCode: string;
  onConvertCode: (framework: 'React' | 'Vue') => Promise<void>;
  isConverting: boolean;
  convertedCodeCache: Record<string, string>;
}

const CodePreview: React.FC<CodePreviewProps> = ({ htmlCode, onConvertCode, isConverting, convertedCodeCache }) => {
  const [copied, setCopied] = useState(false);
  const [activeFramework, setActiveFramework] = useState<Framework>('HTML');
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    // When the htmlCode changes (new design generated), reset to show HTML
    setActiveFramework('HTML');
  }, [htmlCode]);

  useEffect(() => {
    if ((activeFramework === 'React' || activeFramework === 'Vue') && !convertedCodeCache[activeFramework]) {
        onConvertCode(activeFramework);
    }
  }, [activeFramework, convertedCodeCache, onConvertCode]);
  
  const getCodeToDisplay = () => {
      if (activeFramework === 'HTML') return htmlCode;
      return convertedCodeCache[activeFramework] || '';
  }

  const codeToDisplay = getCodeToDisplay();
  const lines = codeToDisplay.split('\n');
  const codeStats = {
    lines: lines.length,
    characters: codeToDisplay.length,
    words: codeToDisplay.trim().split(/\s+/).length
  };

  const handleCopy = async () => {
    if (!codeToDisplay) return;
    
    try {
      await navigator.clipboard.writeText(codeToDisplay);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };
  
  const handleOpenInCodePen = () => {
    if (activeFramework !== 'HTML' || !htmlCode) return;
    
    const data = {
      title: "DAssigner AI Design",
      html: htmlCode,
      js_external: "https://cdn.tailwindcss.com",
      editors: "100", // HTML visible, CSS and JS hidden
      description: "Generated by DAssigner AI - Design at the Speed of Thought"
    };

    const form = document.createElement('form');
    form.action = 'https://codepen.io/pen/define';
    form.method = 'POST';
    form.target = '_blank';
    
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'data';
    input.value = JSON.stringify(data);
    
    form.appendChild(input);
    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
  };

  const getFrameworkIcon = (framework: Framework) => {
    switch (framework) {
      case 'HTML':
        return <div className="w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold">H</div>;
      case 'React':
        return <div className="w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold">R</div>;
      case 'Vue':
        return <div className="w-4 h-4 bg-green-500 rounded-full flex items-center justify-center text-white text-xs font-bold">V</div>;
      default:
        return null;
    }
  };

  const getFrameworkColor = (framework: Framework) => {
    switch (framework) {
      case 'HTML':
        return 'from-orange-500 to-red-500';
      case 'React':
        return 'from-blue-500 to-cyan-500';
      case 'Vue':
        return 'from-green-500 to-emerald-500';
      default:
        return 'from-slate-500 to-slate-600';
    }
  };

  const FrameworkButton: React.FC<{ framework: Framework }> = ({ framework }) => {
    const isActive = activeFramework === framework;
    const isConverting = (framework === 'React' || framework === 'Vue') && 
                        activeFramework === framework && 
                        !convertedCodeCache[framework];
    
    return (
      <button
        onClick={() => setActiveFramework(framework)}
        className={`group relative flex items-center gap-2 px-4 py-2.5 text-sm font-medium rounded-xl transition-all duration-200 ${
          isActive 
            ? `bg-gradient-to-r ${getFrameworkColor(framework)} text-white shadow-lg shadow-${framework === 'HTML' ? 'orange' : framework === 'React' ? 'blue' : 'green'}-500/30` 
            : 'text-slate-600 dark:text-slate-300 hover:bg-slate-200/80 dark:hover:bg-slate-800/80 hover:text-slate-800 dark:hover:text-slate-100'
        }`}
        disabled={isConverting}
        title={`View as ${framework}`}
      >
        {getFrameworkIcon(framework)}
        <span>{framework}</span>
        {isConverting && (
          <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin ml-1"></div>
        )}
        {isActive && (
          <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-white/5 rounded-xl"></div>
        )}
      </button>
    );
  };

  const LoadingSkeleton = () => (
    <div className="space-y-2">
      {Array.from({ length: 15 }).map((_, i) => (
        <div key={i} className="flex items-center gap-3">
          <div className="w-8 text-right text-slate-400 dark:text-slate-500 text-xs font-mono">
            {i + 1}
          </div>
          <div 
            className="h-4 bg-gradient-to-r from-slate-300/60 via-slate-200/80 to-slate-300/60 dark:from-slate-700/60 dark:via-slate-600/80 dark:to-slate-700/60 rounded animate-pulse"
            style={{ width: `${Math.floor(Math.random() * 40) + 40}%` }}
          />
        </div>
      ))}
    </div>
  );

  return (
    <div className="bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl border border-slate-200/50 dark:border-cyan-400/20 rounded-2xl shadow-2xl shadow-slate-200/50 dark:shadow-cyan-900/20 overflow-hidden w-full max-w-6xl mx-auto">
      {/* Header */}
      <div className="bg-gradient-to-r from-slate-100/80 to-slate-50/80 dark:from-slate-800/80 dark:to-slate-900/80 backdrop-blur-sm border-b border-slate-200/50 dark:border-cyan-400/20">
        <div className="flex flex-wrap justify-between items-center p-6 gap-4">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm p-1.5 rounded-xl border border-slate-200/50 dark:border-slate-700/50">
              <FrameworkButton framework="HTML" />
              <FrameworkButton framework="React" />
              <FrameworkButton framework="Vue" />
            </div>
            
            {/* Code Stats */}
            <div className="hidden md:flex items-center gap-4 text-xs text-slate-500 dark:text-slate-400">
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>{codeStats.lines} lines</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                <span>{codeStats.characters} chars</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>{codeStats.words} words</span>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-3">
            {activeFramework === 'HTML' && (
              <button
                onClick={handleOpenInCodePen}
                className="group flex items-center gap-2 bg-slate-900 dark:bg-slate-800 text-white font-medium py-2.5 px-4 rounded-xl hover:bg-slate-800 dark:hover:bg-slate-700 transition-all duration-200 shadow-lg shadow-slate-900/20"
                title="Open in CodePen"
              >
                <ArrowTopRightOnSquareIcon className="w-4 h-4 group-hover:scale-110 transition-transform" />
                <span className="hidden sm:inline">CodePen</span>
              </button>
            )}
            
            <button
              onClick={handleCopy}
              className={`group flex items-center gap-2 font-medium py-2.5 px-4 rounded-xl transition-all duration-200 shadow-lg ${
                copied 
                  ? 'bg-green-500 text-white shadow-green-500/20' 
                  : 'bg-cyan-500 hover:bg-cyan-400 text-white shadow-cyan-500/20'
              }`}
              disabled={copied || !codeToDisplay}
              title={copied ? 'Copied!' : 'Copy Code'}
            >
              {copied ? (
                <CheckIcon className="w-4 h-4 animate-bounce" />
              ) : (
                <CopyIcon className="w-4 h-4 group-hover:scale-110 transition-transform" />
              )}
              <span className="hidden sm:inline">
                {copied ? 'Copied!' : 'Copy'}
              </span>
            </button>
          </div>
        </div>
      </div>

      {/* Code Content */}
      <div 
        className={`overflow-auto bg-gradient-to-b from-slate-50/30 via-transparent to-slate-100/30 dark:from-slate-900/40 dark:via-transparent dark:to-slate-800/40 relative transition-all duration-300 ${
          isExpanded ? 'max-h-none' : 'max-h-96'
        }`}
        style={{ maxHeight: isExpanded ? 'none' : '24rem' }}
      >
        <div className="p-6">
          {(isConverting && !codeToDisplay) ? (
            <LoadingSkeleton />
          ) : codeToDisplay ? (
            <pre className="text-sm font-mono leading-relaxed">
              <code className="block">
                {lines.map((line, index) => (
                  <div key={index} className="flex items-start gap-4 hover:bg-slate-100/50 dark:hover:bg-slate-800/30 rounded px-2 py-0.5 transition-colors group">
                    <span className="flex-shrink-0 w-8 text-right text-slate-400 dark:text-slate-500 text-xs select-none group-hover:text-slate-600 dark:group-hover:text-slate-300">
                      {index + 1}
                    </span>
                    <span className="flex-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap break-all">
                      {line || '\u00A0'}
                    </span>
                  </div>
                ))}
              </code>
            </pre>
          ) : (
            <div className="flex flex-col items-center justify-center py-12 text-center">
              <SparklesIcon className="w-12 h-12 text-slate-300 dark:text-slate-600 mb-4" />
              <p className="text-slate-500 dark:text-slate-400 text-lg mb-2">No code to display</p>
              <p className="text-slate-400 dark:text-slate-500 text-sm">Generate a design to see the code here</p>
            </div>
          )}
        </div>

        {/* Expand/Collapse Button */}
        {codeToDisplay && lines.length > 20 && (
          <div className="sticky bottom-0 left-0 right-0 bg-gradient-to-t from-white/90 via-white/80 to-transparent dark:from-slate-900/90 dark:via-slate-900/80 pt-8 pb-4 text-center">
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="bg-slate-800 dark:bg-slate-700 text-white font-medium py-2 px-6 rounded-xl hover:bg-slate-700 dark:hover:bg-slate-600 transition-colors shadow-lg shadow-slate-800/20"
            >
              {isExpanded ? 'Collapse' : `Show all ${lines.length} lines`}
            </button>
          </div>
        )}
      </div>

      {/* Framework Info Footer */}
      <div className="bg-gradient-to-r from-slate-100/50 to-slate-50/50 dark:from-slate-800/50 dark:to-slate-900/50 border-t border-slate-200/50 dark:border-cyan-400/20 px-6 py-3">
        <div className="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400">
          <div className="flex items-center gap-2">
            {getFrameworkIcon(activeFramework)}
            <span>
              {activeFramework === 'HTML' ? 'Pure HTML with Tailwind CSS' : 
               activeFramework === 'React' ? 'React Component with JSX' : 
               'Vue 3 Component with Composition API'}
            </span>
          </div>
          <div className="flex items-center gap-1">
            <SparklesIcon className="w-3 h-3 text-cyan-400" />
            <span>Generated by DAssigner AI</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodePreview;